version: "2.2"

networks:
  p2pool-log:
    external: false

volumes:
  db:
    external: false
  cache:
    external: false

services:
  tor:
    image: goldy/tor-hidden-service:v0.4.7.8-57f8867
    tmpfs:
      - /tmp
    restart: always
    environment:
      TOR_SOCKS_PORT: 9050
      SERVICE1_TOR_SERVICE_HOSTS: 80:site:80
      SERVICE1_TOR_SERVICE_VERSION: '3'
      SERVICE1_TOR_SERVICE_KEY: ${TOR_SERVICE_KEY}
    networks:
      - p2pool-log
  site:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
      args:
        - TOR_SERVICE_ADDRESS=${TOR_SERVICE_ADDRESS}
        - NET_SERVICE_ADDRESS=${NET_SERVICE_ADDRESS}
    restart: always
    depends_on:
      - api
      - web
    tmpfs:
      - /run
      - /var/cache/nginx
      - /tmp
    networks:
      - p2pool-log
    ports:
      - 8189:80

  api:
    image: golang:1.19-alpine
    restart: always
    environment:
      - MONEROD_RPC_URL=${MONEROD_RPC_URL}
      - API_FOLDER=/api
    depends_on:
      - db
      - scraper
    security_opt:
      - no-new-privileges:true
    volumes:
      - cache:/cache:rw
      - "${API_FOLDER}:/api:ro"
    networks:
      - p2pool-log
    command: >-
      go run git.gammaspectra.live/P2Pool/p2pool-observer/cmd/api@7078e5ea8e401964cb4ad1ed95b25719876aeb80 "host=db port=5432 dbname=p2pool user=p2pool password=p2pool sslmode=disable"
  web:
    image: golang:1.19-alpine
    restart: always
    environment:
      - MONEROD_RPC_URL=${MONEROD_RPC_URL}
      - TOR_SERVICE_ADDRESS=${TOR_SERVICE_ADDRESS}
      - NET_SERVICE_ADDRESS=${NET_SERVICE_ADDRESS}
      - API_URL=http://api:8080/api/
      - SITE_TITLE=${SITE_TITLE}
    depends_on:
      - api
    security_opt:
      - no-new-privileges:true
    networks:
      - p2pool-log
    command: >-
      go run git.gammaspectra.live/P2Pool/p2pool-observer/cmd/web@7078e5ea8e401964cb4ad1ed95b25719876aeb80
  scraper:
    image: golang:1.19-alpine
    restart: always
    environment:
      - MONEROD_RPC_URL=${MONEROD_RPC_URL}
      - API_FOLDER=/api
    depends_on:
      - db
    security_opt:
      - no-new-privileges:true
    volumes:
      - cache:/cache:rw
      - "${API_FOLDER}:/api:ro"
    networks:
      - p2pool-log
    command: >-
      go run git.gammaspectra.live/P2Pool/p2pool-observer/cmd/daemon@7078e5ea8e401964cb4ad1ed95b25719876aeb80 -db="host=db port=5432 dbname=p2pool user=p2pool password=p2pool sslmode=disable"
  bot:
    build:
      context: ./
      dockerfile: docker/php/Dockerfile
    restart: always
    environment:
      - IRC_SERVER_HOST=${IRC_SERVER_HOST}
      - IRC_SERVER_PORT=${IRC_SERVER_PORT}
      - IRC_SERVER_PASS=${IRC_SERVER_PASS}
      - BOT_USER=${BOT_USER}
      - BOT_NICK=${BOT_NICK}
      - BOT_PASSWORD=${BOT_PASSWORD}
      - BOT_COMMANDS_CHANNEL=${BOT_COMMANDS_CHANNEL}
      - BOT_BLOCKS_FOUND_CHANNEL=${BOT_BLOCKS_FOUND_CHANNEL}
      - MONEROD_RPC_URL=${MONEROD_RPC_URL}
      - TOR_SERVICE_ADDRESS=${TOR_SERVICE_ADDRESS}
      - NET_SERVICE_ADDRESS=${NET_SERVICE_ADDRESS}
    depends_on:
      - db
      - tor
      - scraper
    read_only: true
    security_opt:
      - no-new-privileges:true
    volumes:
      - cache:/cache:rw
      - "${API_FOLDER}:/api:ro"
    tmpfs:
      - /tmp
    networks:
      - p2pool-log
    command: >-
      php /app/src/bot.php "host=db port=5432 dbname=p2pool user=p2pool password=p2pool"
  db:
    image: postgres:13.7
    restart: always
    read_only: true
    shm_size: 4gb
    security_opt:
      - no-new-privileges:true
    environment:
      - POSTGRES_USER=p2pool
      - POSTGRES_PASSWORD=p2pool
      - POSTGRES_DB=p2pool
    command:
      - "postgres"
      - "-c"
      - "max_connections=1000"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "work_mem=64MB"
      - "-c"
      - "temp_buffers=64MB"
      - "-c"
      - "hash_mem_multiplier=2.0"
    networks:
      - p2pool-log
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname \"postgres://p2pool:p2pool@db/p2pool\"" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db:/var/lib/postgresql/data:rw
    tmpfs:
      # For read-only filesystem, need to create a volume/tmpfs for PostgreSQL to run its much
      # needed configuration. The read-only flag does not make volumes and tmpfs read-only.
      - /tmp
      - /run
      - /run/postgresql